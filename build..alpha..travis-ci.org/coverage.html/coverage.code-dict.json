{"/home/travis/build/npmtest/node-npmtest-flatiron/test.js":"/* istanbul instrument in package npmtest_flatiron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flatiron/lib.npmtest_flatiron.js":"/* istanbul instrument in package npmtest_flatiron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_flatiron = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_flatiron = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-flatiron/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-flatiron && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_flatiron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_flatiron\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_flatiron.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_flatiron.rollup.js'] =\n            local.assetsDict['/assets.npmtest_flatiron.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_flatiron.__dirname + '/lib.npmtest_flatiron.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/lib/flatiron.js":"/*\n * flatiron.js: An elegant blend of convention and configuration for building apps in Node.js and the browser.\n *\n * Copyright(c) 2011 Nodejitsu Inc. <info@nodejitsu.com>\n * MIT LICENCE\n *\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    broadway = require('broadway');\n\nvar flatiron = exports,\n    _app;\n\n//\n// ### Export core `flatiron` modules\n//\nflatiron.common    = require('./flatiron/common');\nflatiron.constants = require('./flatiron/constants');\nflatiron.formats   = broadway.formats;\nflatiron.App       = require('./flatiron/app').App;\nflatiron.version   = require('../package.json').version;\n\n//\n// ### Expose core `flatiron` plugins\n// Hoist those up from `broadway` and define each of\n// the `flatiron` plugins as a lazy loaded `require` statement\n//\nflatiron.plugins = broadway.common.mixin(\n  {},\n  broadway.plugins,\n  broadway.common.requireDirLazy(path.join(__dirname, 'flatiron', 'plugins'))\n);\n\n\nObject.defineProperty(flatiron, 'app', {\n\n  // Don't allow another `.defineProperty` on 'app'\n  configurable: false,\n\n  //\n  // ### getter @app {flatiron.App}\n  // Gets the default top-level Application for `flatiron`\n  //\n  get: function() {\n    return _app = _app || flatiron.createApp();\n  },\n\n  //\n  // #### setter @app {flatiron.App}\n  // Options for the application to create or the application to set\n  //\n  set: function(value) {\n    if (value instanceof flatiron.App) return _app = value;\n    return _app = flatiron.createApp(value);\n  }\n\n});\n\n\n//\n// ### function createApp (options)\n// #### @options {Object} Options for the application to create\n// Creates a new instance of `flatiron.App` with the\n// specified `options`.\n//\nflatiron.createApp = function (options) {\n  return new flatiron.App(options);\n};\n\n","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/lib/flatiron/common.js":"/*\n * common.js: Common utility functions for flatiron.\n *\n * (C) 2011, Nodejitsu Inc.\n * MIT LICENSE\n *\n */\n\nvar fs = require('fs'),\n    broadway = require('broadway');\n\n//\n// Hoist `broadway.common` to `flatiron.common`.\n//\nvar common = module.exports = broadway.common.mixin({}, broadway.common);\n\n//\n// ### function templateUsage (app, commands)\n// Updates the references to `<app>` to `app.name` in usage for the\n// specified `commands`.\n//\ncommon.templateUsage = function (app, commands) {\n  if (!app.name) {\n    return commands;\n  }\n\n  function templateUsage(usage) {\n    return usage.map(function (line) {\n      return line.replace(/\\<app\\>/ig, app.name);\n    });\n  }\n\n  Object.keys(commands).forEach(function (command) {\n    if (command === 'usage') {\n      commands.usage = templateUsage(commands.usage);\n    }\n    else if (commands[command].usage) {\n      commands[command].usage = templateUsage(commands[command].usage);\n    }\n  });\n};\n\n//\n// ### function tryReaddirSync (dir)\n// #### @dir {string} Directory to attempt to list\n//\n// Attempts to call `fs.readdirSync` but ignores errors.\n//\ncommon.tryReaddirSync = function (dir) {\n  try { return fs.readdirSync(dir) }\n  catch (err) { return [] }\n};","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/lib/flatiron/constants.js":"/*\n * constants.js: Constants within the Flatiron framework.\n *\n * (C) 2011, Nodejitsu Inc.\n * MIT LICENSE\n *\n */\n\nvar constants = exports;\n\nconstants.DIRECTORIES = {\n  \"#ENV\": \"#CONFIG/env\",\n  \"#APP\": \"#ROOT/app\",\n  \"#CONFIG\": \"#ROOT/config\",\n  \"#DOCS\": \"#ROOT/docs\",\n  \"#LOG\": \"#ROOT/log\",\n  \"#LIB\": \"#ROOT/lib\",\n  \"#TEST\": \"#ROOT/test\"\n};\n","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/lib/flatiron/app.js":"/*\n * app.js: Core Application object for managing plugins and features in broadway\n *\n * (C) 2011, Nodejitsu Inc.\n * MIT LICENSE\n *\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    broadway = require('broadway');\n\nvar App = exports.App = function (options) {\n  broadway.App.call(this, options);\n};\n\n//\n// Inherit from `broadway.App`.\n//\nutil.inherits(App, broadway.App);\n","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/scaffolds/cli/app.js":"var flatiron = require('flatiron'),\n    path = require('path'),\n    app = flatiron.app;\n\napp.config.file({ file: path.join(__dirname, 'config', 'config.json') });\n\napp.use(flatiron.plugins.cli, {\n  source: path.join(__dirname, 'lib', 'commands'),\n  usage: 'Empty Flatiron Application, please fill out commands'\n});\n\napp.start();\n","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/lib/flatiron/plugins/cli.js":"/*\n * index.js: Top-level plugin exposing CLI features in flatiron\n *\n * (C) 2011, Nodejitsu Inc.\n * MIT LICENSE\n *\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    flatiron = require('../../flatiron'),\n    common = flatiron.common,\n    director = require('director');\n\n//\n// ### Name this plugin\n//\nexports.name = 'cli';\n\n//\n// ### function attach (options, done)\n// #### @options {Object} Options for this plugin\n// Initializes `this` (the application) with the core `cli` plugins consisting of:\n// `argv`, `prompt`, `routing`, `commands` in that order.\n//\nexports.attach = function (options) {\n  var app = this;\n  options = options || {};\n\n  //\n  // Define the `cli` namespace on the app for later use\n  //\n  app.cli = app.cli || {};\n\n  //\n  // Mixin some keys properly so that plugins can also set them\n  //\n  options.argv = common.mixin({}, app.cli.argv || {}, options.argv || {});\n  options.prompt = common.mixin({}, app.cli.prompt || {}, options.prompt || {});\n\n  app.cli = common.mixin({}, app.cli, options);\n\n  if (app.cli.notFoundUsage == undefined) {\n    app.cli.notFoundUsage = true;\n  }\n\n  //\n  // Setup `this.argv` to use `optimist`.\n  //\n  exports.argv.call(this, app.cli.argv);\n  app.use(flatiron.plugins.inspect);\n\n  //\n  // If `options.version` is truthy, `app.version` is defined and `-v` or\n  // `--version` command line parameters were passed, print out `app.version`\n  // and exit.\n  //\n  if (app.cli.version && app.version && (this.argv.v || this.argv.version)) {\n    console.log(app.version);\n    process.exit(0);\n  }\n\n  //\n  // Setup `this.prompt`.\n  //\n  exports.prompt.call(this, app.cli.prompt);\n\n  //\n  // Setup `app.router` and associated core routing method.\n  //\n  app.router = new director.cli.Router().configure({\n    async: app.async || app.cli.async\n  });\n\n  app.start = function (options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    callback = callback || function () {};\n    app.init(options, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      app.router.dispatch('on', app.argv._.join(' '), app.log, callback);\n    });\n  };\n\n  app.cmd = function (path, handler) {\n    app.router.on(path, handler);\n  };\n\n  exports.commands.call(this);\n};\n\n//\n// ### function init (done)\n// #### @done {function} Continuation to respond to when complete\n// Initializes this plugin by setting `winston.cli` (i.e. `app.log.cli`)\n// to enable colors and padded levels.\n//\nexports.init = function (done) {\n  var app = this,\n      logger;\n\n  if (!app.log.help) {\n    logger = app.log.get('default');\n    logger.cli().extend(app.log);\n  }\n\n  if (app.config) {\n    //\n    // Create a literal store for argv to\n    // avoid re-parsing CLI options.\n    //\n    app.config.use('argv', {\n      type: 'literal',\n      store: app.argv\n    });\n\n    app.config.env();\n  }\n\n  done();\n};\n\n//\n// ### function argv (options)\n// #### @options {Object} Pass-thru options for optimist\n// Sets up `app.argv` using `optimist` and the specified options.\n//\nexports.argv = function (options) {\n  var optimist = require('optimist').string('_');\n\n  if (options && Object.keys(options).length) {\n    optimist = optimist.options(options);\n    this.showOptions = optimist.help;\n    this.argv = optimist.argv;\n  }\n  else {\n    this.showOptions = optimist.help;\n    this.argv = optimist.argv;\n  }\n};\n\n//\n// ### function commands (options)\n// #### @options {Object} Options for the application commands\n// Configures the `app.commands` object which is lazy-loaded from disk\n// along with some default logic for: `help` and `alias`.\n//\nexports.commands = function (options) {\n  var app = this;\n\n  function showUsage(target) {\n    target = Array.isArray(target) ? target : target.split('\\n');\n    target.forEach(function (line) {\n      app.log.help(line);\n    });\n\n    var lines = app.showOptions().split('\\n').filter(Boolean);\n\n    if (lines.length) {\n      app.log.help('');\n      lines.forEach(function (line) {\n        app.log.help(line);\n      });\n    }\n  }\n\n  //\n  // Setup any pass-thru options to the\n  // application instance but make them lazy\n  //\n  app.usage = app.cli.usage;\n  app.cli.source = app.cli.dir || app.cli.source;\n  app.commands = app.commands || {};\n\n  //\n  // Helper function which loads the file for the\n  // specified `name` into `app.commands`.\n  //\n  function loadCommand(name, command, silent) {\n    var resource = app.commands[name];\n    var usage = app.usage || [\n      name\n        ? 'Cannot find commands for ' + name.magenta\n        : 'Cannot find commands'\n    ];\n\n    if (resource && (!command || resource[command])) {\n      return true;\n    }\n\n    if (app.cli.source) {\n      if (!app.cli.sourceDir) {\n        try {\n          var stats = fs.statSync(app.cli.source);\n          app.cli.sourceDir = stats.isDirectory();\n        }\n        catch (ex) {\n          if (app.cli.notFoundUsage) {\n            showUsage(usage)\n          }\n\n          return false;\n        }\n      }\n\n      try {\n        if (app.cli.sourceDir) {\n          app.commands[name] = require(path.join(app.cli.source, name || ''));\n        }\n        else {\n          app.commands = common.mixin(app.commands, require(app.cli.source));\n        }\n        return true;\n      }\n      catch (err) {\n        // If that file could not be found, error message should start with\n        // \"Cannot find module\" and contain the name of the file we tried requiring.\n        if (!err.message.match(/^Cannot find module/) || (name && err.message.indexOf(name) === -1)) {\n          throw err;\n        }\n\n        if (!silent) {\n          if (app.cli.notFoundUsage) {\n            showUsage(usage);\n          }\n        }\n\n        return false;\n      }\n    }\n  }\n\n  //\n  // Helper function to ensure the user wishes to execute\n  // a destructive command.\n  //\n  function ensureDestroy(callback) {\n    app.prompt.get(['destroy'], function (err, result) {\n      if (result.destroy !== 'yes' && result.destroy !== 'y') {\n        app.log.warn('Destructive operation cancelled');\n        return callback(true);\n      }\n\n      callback();\n    });\n  }\n\n  //\n  // Helper function which executes the command\n  // represented by the Array of `parts` passing\n  // control to the `callback`.\n  //\n  function executeCommand(parts, callback) {\n    var name,\n        shouldLoad = true,\n        command,\n        usage;\n\n    if (typeof parts === 'undefined' || typeof parts === 'function') {\n      throw(new Error('parts is a required argument of type Array'));\n    }\n\n    name = parts.shift();\n\n    if (app.cli.source || app.commands[name]) {\n      if (app.commands[name]) {\n        shouldLoad = false;\n        if (typeof app.commands[name] != 'function' && !app.commands[name][parts[0]]) {\n          shouldLoad = true;\n        }\n      }\n\n      if (shouldLoad && !loadCommand(name, parts[0])) {\n        return callback();\n      }\n\n      command = app.commands[name];\n      while (command) {\n        usage = command.usage;\n\n        if (!app.argv.h && !app.argv.help && typeof command === 'function') {\n          while (parts.length + 1 < command.length) {\n            parts.push(null);\n          }\n\n          if (command.destructive) {\n            return ensureDestroy(function (err) {\n              return err ? callback() : command.apply(app, parts.concat(callback));\n            })\n          }\n\n          command.apply(app, parts.concat(callback));\n          return;\n        }\n\n        command = command[parts.shift()];\n      }\n\n      //\n      // Since we have not resolved a needle, try and print out a usage message\n      //\n      if (usage || app.cli.usage) {\n        showUsage(usage || app.cli.usage);\n        callback(false);\n      }\n    }\n    else if (app.usage) {\n      //\n      // If there's no directory we're supposed to search for modules, simply\n      // print out usage notice if it's provided.\n      //\n      showUsage(app.cli.usage);\n      callback(true);\n    }\n  }\n\n  //\n  // Expose the executeCommand method\n  //\n  exports.executeCommand = executeCommand;\n\n  //\n  // Allow commands to be aliased to subcomponents. e.g.\n  //\n  //    app.alias('list', { resource: 'apps', command: 'list' });\n  //    app.alias('new', { command: 'create' });\n  //    app.alias('new', 'create');\n  //\n  app.alias = function (target, source) {\n    app.commands.__defineGetter__(target, function () {\n\n      var resource = source.resource || source.command || source,\n          command = source.resource ? source.command : null;\n\n      loadCommand(resource, command, true);\n      resource = app.commands[resource];\n\n      if (resource) {\n        return source.resource && source.command\n          ? resource[source.command]\n          : resource;\n      }\n    });\n  };\n\n  //\n  // Set the `loadCommand` function to run\n  // whenever the router has not matched\n  // the CLI arguments, `process.argv`.\n  //\n  app.router.notfound = function (callback) {\n    executeCommand(app.argv._.slice(), callback);\n  };\n\n  //\n  // Setup default help command\n  //\n  app.cmd(/help ([^\\s]+)?\\s?([^\\s]+)?/, app.showHelp = function showHelp() {\n    var args = Array.prototype.slice.call(arguments).filter(Boolean),\n        callback = typeof args[args.length - 1] === 'function' && args.pop(),\n        resource,\n        usage;\n\n    function displayAndRespond(found) {\n      showUsage(usage || app.usage);\n      if (!found) {\n        app.log.warn('Cannot find help for ' + args.join(' ').magenta);\n      }\n\n      if (callback) {\n        callback();\n      }\n    }\n\n    if (!loadCommand(args[0], args[1], true)) {\n      return displayAndRespond(false);\n    }\n\n    resource = app.commands[args[0]];\n    usage = resource.usage;\n\n    for (var i = 1; i < args.length; i++) {\n      if (!resource[args[i]]) {\n        return displayAndRespond(false);\n      }\n      else if (resource[args[i]].usage) {\n        resource = resource[args[i]];\n        usage = resource.usage;\n      }\n    }\n\n    displayAndRespond(true);\n  });\n};\n\n//\n// ### function prompt (options)\n// #### @options {Object} Options for the prompt.\n// Sets up the application `prompt` property to be a lazy\n// setting which loads the `prompt` module.\n//\nexports.prompt = function (options) {\n  options = options || {};\n\n  this.__defineGetter__('prompt', function () {\n    if (!this._prompt) {\n      //\n      // Pass-thru any prompt specific options that are supplied.\n      //\n      var prompt = require('prompt'),\n          self = this;\n\n      prompt.allowEmpty = options.allowEmpty || prompt.allowEmpty;\n      prompt.message    = options.message    || prompt.message;\n      prompt.delimiter  = options.delimiter  || prompt.delimiter;\n      prompt.properties = options.properties || prompt.properties;\n\n      //\n      // Setup `destroy` property for destructive commands\n      //\n      prompt.properties.destroy = {\n        name: 'destroy',\n        message: 'This operation cannot be undone, Would you like to proceed?',\n        default: 'yes'\n      };\n\n      //\n      // Hoist up any prompt specific events and re-emit them as\n      // `prompt::*` events.\n      //\n      ['start', 'pause', 'resume', 'prompt', 'invalid'].forEach(function (ev) {\n        prompt.on(ev, function () {\n          var args = Array.prototype.slice.call(arguments);\n          self.emit.apply(self, [['prompt', ev]].concat(args));\n        });\n      });\n\n      //\n      // Extend `this` (the application) with prompt functionality\n      // and open `stdin`.\n      //\n      this._prompt = prompt;\n      this._prompt.start().pause();\n    }\n\n    return this._prompt;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-flatiron/node_modules/flatiron/scaffolds/cli/lib/index.js":""}